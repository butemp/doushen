// Code generated by hertz generator.

package feed

import (
	"context"
	feed "dous/biz/model/hertz/feed"
	"dous/biz/model/hertz/user"
	"dous/biz/model/query"
	"dous/biz/orm_gen"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strings"
	"time"
)

// FeedResponse .
// @router /douyin/feed [POST]
func FeedResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req feed.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(feed.DouyinFeedResponse)

	resp.StatusCode = 1
	resp.StatusMsg = "false"
	resp.VideoList = nil
	resp.NextTime = time.Now().Unix()

	v := query.Video
	if req.LatestTime > time.Now().Unix() {
		req.LatestTime = time.Now().Unix()
	}
	tm := time.Unix(req.LatestTime, 0)

	result, err := v.Where(v.Time.Date().Lt(tm)).Limit(30).Order(v.Time.Desc()).Find()
	if err != nil {
		print("result出错了！！！！！！！！！！")
		print(err)
		return
	}

	u := query.User
	var resVideo [40]*feed.Video
	for i, it := range result {
		var video1 feed.Video

		author, err := v.Where(v.ID.Eq(it.ID)).First()
		if err != nil {
			print(err)
			return
		}

		users, err := u.Where(u.ID.Eq(author.AuthorID)).First()
		if err != nil {
			print(err)
			return
		}

		var userFeed user.User
		userFeed.Id = users.ID
		userFeed.Name = users.Username
		userFeed.Avatar = "111"
		userFeed.Signature = "222"
		userFeed.FavoriteCount = 0
		userFeed.FollowerCount = 0
		userFeed.BackgroundImage = "555"
		userFeed.IsFollow = false
		userFeed.TotalFavorited = 0
		userFeed.WorkCount = 0
		userFeed.FollowCount = 0

		video1.Id = it.ID
		video1.Title = "this is a title"
		video1.Author = &userFeed
		video1.PlayUrl = "http://10.122.233.220:8888/find?path=" + strings.Split(it.PlayURL, "/")[3]
		video1.CoverUrl = "http://10.122.233.220:8888/find?path=fengmian.png"
		video1.CommentCount = 0
		video1.FavoriteCount = 0
		video1.IsFavorite = false
		//print("i:")
		//print(i)
		//println(video1.PlayUrl)
		resVideo[i] = &video1
	}

	var videos []*feed.Video
	for _, v := range resVideo {
		if v == nil {
			break
		}
		videos = append(videos, v)
		//print("i:")
		//print(i)
		//println(v.PlayUrl)
	}

	resp.StatusCode = 0
	resp.StatusMsg = "succcess"
	resp.VideoList = videos
	resp.NextTime = time.Now().Unix()

	c.JSON(consts.StatusOK, resp)
}

// VideoPublicResponse .
// @router /douyin/publish/action [POST]
func VideoPublicResponse(ctx context.Context, c *app.RequestContext) {
	//var err error
	var req feed.DouyinPublishActionRequest
	c.BindAndValidate(&req)
	//print("DDDDDDDDDDDDDDDDDDDDDD")
	//if err != nil {
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return
	//}
	//print("QWEQWEQEQWEQWEQW")

	resp := new(feed.DouyinPublishActionResponse)
	resp.StatusCode = 1
	resp.StatusMsg = "false"
	file, _ := c.Request.FormFile("data")
	fmt.Println(file.Filename)
	c.SaveUploadedFile(file, fmt.Sprintf("./file/upload/%s", file.Filename))

	s := strings.Split(req.Token, "&")
	name := s[0]
	u := query.User
	result, err := u.Where(u.Username.Eq(name)).First()
	if err != nil {
		print(err)
		return
	}
	video1 := orm_gen.Video{
		AuthorID: result.ID,
		PlayURL:  "./file/upload/" + file.Filename,
		Time:     time.Now(),
		Title:    req.Title,
	}
	err = query.Video.WithContext(ctx).Create(&video1)
	if err != nil {
		print(err)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "success"

	c.JSON(consts.StatusOK, resp)
}
