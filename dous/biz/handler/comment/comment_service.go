// Code generated by hertz generator.

package comment

import (
	"context"
	"dous/biz/model/hertz/user"
	"dous/biz/model/query"
	"dous/biz/orm_gen"
	"strings"
	"time"

	comment "dous/biz/model/hertz/comment"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentActionResponse .
// @router /douyin/comment/action/ [POST]
func CommentActionResponse(ctx context.Context, c *app.RequestContext) {
	var req comment.DouyinCommentActionRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(comment.DouyinCommentActionResponse)

	resp.StatusCode = 1
	resp.Comment = nil
	resp.StatusMsg = "false"

	s := strings.Split(req.Token, "&")
	name := s[0]
	u := query.User
	result, err := u.Where(u.Username.Eq(name)).First()
	if err != nil {
		print(err)
		return
	}

	co := query.Comment
	comment1 := orm_gen.Comment{
		UserID:      result.ID,
		VideoID:     req.VideoId,
		CommentText: req.CommentText,
		CreatDate:   time.Now(),
		Cancel:      0,
	}

	if req.ActionType == 1 {
		err = co.WithContext(ctx).Create(&comment1)
		if err != nil {
			c.JSON(200, resp)
			return
		}
	} else {
		co.WithContext(ctx).Where(co.ID.Eq(req.CommentId)).Update(co.Cancel, 1)
	}

	comments, err := co.Order(co.CreatDate.Desc()).First()
	if err != nil {
		c.JSON(200, resp)
		return
	}

	user1, err := u.Where(u.ID.Eq(comments.UserID)).First()
	if err != nil {
		c.JSON(200, resp)
		return
	}
	var userFeed user.User
	userFeed.Id = user1.ID
	userFeed.Name = user1.Username
	userFeed.Avatar = "111"
	userFeed.Signature = "222"
	userFeed.FavoriteCount = 3
	userFeed.FollowerCount = 4
	userFeed.BackgroundImage = "555"
	userFeed.IsFollow = false
	userFeed.TotalFavorited = 7
	userFeed.WorkCount = 8
	userFeed.FollowCount = 9

	comment2 := comment.Comment{
		Id:         comments.ID,
		User:       &userFeed,
		Content:    comments.CommentText,
		CreateDate: comments.CreatDate.String(),
	}
	resp.StatusCode = 0
	resp.Comment = &comment2
	resp.StatusMsg = "true"
	c.JSON(consts.StatusOK, resp)
}

// CommentListResponse .
// @router /douyin/comment/list/ [GET]
func CommentListResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(comment.DouyinCommentListResponse)
	resp.CommentList = nil
	resp.StatusMsg = "false"
	resp.StatusCode = 1

	co := query.Comment
	result, err := co.Where(co.Cancel.Eq(0), co.VideoID.Eq(req.VideoId)).Order(co.CreatDate.Desc()).Find()
	if err != nil {
		c.JSON(200, resp)
		return
	}

	u := query.User
	l := query.Like
	v := query.Video
	var resComment [100]*comment.Comment

	for i, it := range result {
		var comment1 comment.Comment

		author, err := co.Where(co.ID.Eq(it.ID)).First()
		if err != nil {
			print(err)
			return
		}

		users, err := u.Where(u.ID.Eq(author.UserID)).First()
		if err != nil {
			print(err)
			return
		}

		var userFeed user.User
		userFeed.Id = users.ID
		userFeed.Name = users.Username
		userFeed.Avatar = "111"
		userFeed.Signature = "222"
		userFeed.FavoriteCount, _ = l.Where(l.VideoID.Eq(req.VideoId), l.Cancel.Eq(0)).Count()
		userFeed.FollowerCount = 0
		userFeed.BackgroundImage = "555"
		userFeed.IsFollow = false
		userFeed.TotalFavorited = 1
		userFeed.WorkCount, _ = v.Where(v.AuthorID.Eq(users.ID)).Count()
		userFeed.FollowCount = 0

		comment1.Id = it.ID
		comment1.CreateDate = it.CreatDate.String()
		comment1.User = &userFeed
		comment1.Content = it.CommentText
		//print("i:")
		//print(i)
		//println(video1.PlayUrl)
		resComment[i] = &comment1
	}

	var comments []*comment.Comment
	for _, v := range resComment {
		if v == nil {
			break
		}
		comments = append(comments, v)
		//print("i:")
		//print(i)
		//println(v.PlayUrl)
	}
	resp.CommentList = comments
	resp.StatusMsg = "true"
	resp.StatusCode = 0

	c.JSON(consts.StatusOK, resp)
}
