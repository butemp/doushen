// Code generated by hertz generator.

package favorite

import (
	"context"
	"dous/biz/handler"
	favorite "dous/biz/model/hertz/favorite"
	"dous/biz/model/hertz/feed"
	"dous/biz/model/hertz/user"
	"dous/biz/model/query"
	"dous/biz/orm_gen"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strings"
)

type LikeInfo struct {
	userID  int64
	videoID int64
	cancel  int64
}

// FavoriteActionResponse .
// @router /douyin/favorite/action/ [POST]
func FavoriteActionResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	u := query.Like
	userID := handler.ParseToken(req.Token)

	if req.ActionType == 1 {
		//点赞
		tmp, _ := u.WithContext(ctx).Where(u.UserID.Eq(userID), u.VideoID.Eq(req.VideoId)).Count()
		if tmp == 0 {
			temp := orm_gen.Like{UserID: req.VideoId, VideoID: req.VideoId, Cancel: 0}
			err := u.WithContext(ctx).Select(u.UserID, u.VideoID, u.Cancel).Create(&temp)
			if err != nil {
				return
			}
		} else {
			tmp, _ := u.WithContext(ctx).Where(u.UserID.Eq(userID), u.VideoID.Eq(req.VideoId)).First()
			if tmp.Cancel == 1 {
				u.WithContext(ctx).Where(u.UserID.Eq(userID), u.VideoID.Eq(req.VideoId)).Update(u.Cancel, 0)
			}
		}
	} else {
		u.WithContext(ctx).Where(u.UserID.Eq(userID), u.VideoID.Eq(req.VideoId)).Update(u.Cancel, 1)
	}

	resp := new(favorite.DouyinFavoriteActionResponse)

	resp.StatusCode = 0
	resp.StatusMsg = "success"

	c.JSON(consts.StatusOK, resp)
}

// FavoriteListResponse .
// @router /douyin/favorite/list/ [GET]
func FavoriteListResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite.DouyinFavoriteListResponse)

	u := query.Like
	uu := query.Video
	uuu := query.Comment
	s := query.User

	//res, _ := s.WithContext(ctx).Where(s.ID.Eq(req.UserId)).First()
	//根据用户id去查询已经发布的视频
	//t, err := u.WithContext(ctx).Where(u.AuthorID.Eq(req.UserId)).Find()

	//查询点赞过的视频id
	result, _ := u.WithContext(ctx).Where(u.UserID.Eq(req.UserId)).Find()

	cnt := len(result)
	var videoList [1000]*feed.Video
	for i := 0; i < cnt; i++ {
		//根据视频id去获取视频全部信息
		res, _ := uu.WithContext(ctx).Where(uu.ID.Eq(result[i].VideoID)).First()
		Purl := res.PlayURL

		//查询视频点赞数量
		r, _ := u.WithContext(ctx).Where(u.VideoID.Eq(result[i].VideoID)).Find()
		fanum := len(r)

		//查询视频评论数
		rr, _ := uuu.WithContext(ctx).Where(uuu.VideoID.Eq(result[i].VideoID)).Find()
		cnum := len(rr)

		//查询是否点赞——已经在喜欢列表中，必然已经点赞

		//根据视频ID查询作者ID，并且查询作者所有信息
		author, _ := uu.WithContext(ctx).Where(uu.ID.Eq(result[i].VideoID)).First()
		author_id := author.AuthorID
		t, _ := s.WithContext(ctx).Where(s.ID.Eq(author_id)).First()

		t0, _ := uu.WithContext(ctx).Where(uu.AuthorID.Eq(author_id)).Find()
		len0 := len(t0) //该作者的作品数量
		userinfo := user.User{
			Id:              t.ID,
			Name:            t.Username,
			FollowerCount:   1,
			FollowCount:     1,
			IsFollow:        false,
			Avatar:          "",
			BackgroundImage: "",
			Signature:       "",
			TotalFavorited:  0,
			WorkCount:       int64(len0),
			FavoriteCount:   0,
		}

		tmp := feed.Video{
			Id:            result[i].ID,
			Author:        &userinfo,
			PlayUrl:       "http://10.122.233.220:8888/find?path=" + strings.Split(Purl, "/")[3],
			CoverUrl:      "http://10.122.233.220:8888/find?path=fengmian.png",
			FavoriteCount: int64(fanum),
			CommentCount:  int64(cnum),
			IsFavorite:    true,
			Title:         res.Title,
		}
		videoList[i] = &tmp
	}

	var videos []*feed.Video
	for _, v := range videoList {
		if v == nil {
			break
		}
		videos = append(videos, v)
		//print("i:")
		//print(i)
		//println(v.PlayUrl)
	}

	resp.StatusCode = 1
	resp.StatusMsg = "success"
	resp.VideoList = videos

	c.JSON(consts.StatusOK, resp)
}
